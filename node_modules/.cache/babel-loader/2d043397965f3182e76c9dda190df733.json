{"ast":null,"code":"var _jsxFileName = \"/home/rajatrajivsharma/Desktop/Web Develpoment/XYZ/src/Components/TicketDetails.js\";\nimport React, { Component } from 'react';\nimport { cloneDeep } from 'lodash';\nimport TicketView from '../Views/TikcetView';\nimport { fetch } from '../modules/httpServices';\nimport { constants } from '../modules/constants';\nimport axios from 'axios';\nimport FileSaver, { saveAs } from 'file-saver';\n\nclass TicketDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.downloadFile = () => {\n      axios({\n        url: \"http://3.7.115.94/ticket-tool/v1/tickets/preview?filepath=/home/ec2-user/helpdesk_deploy/UPLOAD/3/Screenshot from 2020-05-22 12-06-33.jpg_1590465234624\",\n        method: 'GET',\n        responseType: \"blob\"\n      }).then(response => {\n        console.log(response);\n        FileSaver.saveAs(response.data, \"hello.jpg\");\n      });\n    };\n\n    this.getTicketInfo = id => {\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n          callbackHandler: response => {\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            _state.isLoading = false;\n\n            if (status === constants.SUCCESS) {\n              _state.message = '';\n              _state.ticketData = payload.result.ticketDetails;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState(_state);\n          }\n        });\n      });\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_LISTING,\n          requestParams: {\n            page: 0,\n            limit: 50\n          },\n          callbackHandler: response => {\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            _state.isLoading = false;\n\n            if (status === constants.SUCCESS) {\n              _state.message = '';\n              _state.listingData = payload.result.tickets;\n\n              _state.listingData.sort((a, b) => a.id - b.id);\n            } else {\n              _state.message = message;\n            }\n\n            this.setState(_state);\n          }\n        });\n      });\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_REPLY + id,\n          callbackHandler: response => {\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = '';\n              _state.ticketReplies = payload.result.conversations;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState({\n              ticketReplies: _state.ticketReplies\n            });\n          }\n        });\n      });\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_VIEW_ADMIN,\n          callbackHandler: response => {\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = \"\";\n              _state.allAdminUsers = payload.data;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState({\n              allAdminUsers: _state.allAdminUsers\n            });\n          }\n        });\n      });\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_HISTORY + id,\n          callbackHandler: response => {\n            const {\n              status,\n              payload,\n              message\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = \"\";\n              _state.ticketJourney = payload.result.ticketJourneys;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState({\n              ticketJourney: _state.ticketJourney\n            });\n          }\n        });\n      });\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.GET_TICKET_STATUS,\n          callbackHandler: response => {\n            const {\n              message,\n              status,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = \"\";\n              _state.allStatus = payload.data;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState({\n              allStatus: _state.allStatus\n            });\n          }\n        });\n      });\n    };\n\n    this.updateTicketData = id => {\n      this.setState({\n        isLoading: true\n      }, () => {\n        fetch.get({\n          url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n          callbackHandler: response => {\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            _state.isLoading = false;\n\n            if (status === constants.SUCCESS) {\n              _state.message = '';\n              _state.ticketData = payload.result.ticketDetails;\n            } else {\n              _state.message = message;\n            }\n\n            this.setState(_state);\n          }\n        });\n      });\n    };\n\n    this.changeSelectValue = (selectValue, ticketStatus) => {\n      if (ticketStatus === \"CLOSED\") {\n        alert('Cannot change assigned role the ticket is closed!');\n      } else {\n        const id = this.props.match.params.ticket_id;\n        this.setState({\n          statusChangeLoading: true\n        }, () => {\n          fetch.put({\n            url: constants.SERVICE_URLS.TICKET_ASSIGN + '/' + id + '?emailId=' + selectValue,\n            callbackHandler: response => {\n              console.log(response);\n              fetch.get({\n                url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                callbackHandler: response => {\n                  const {\n                    status,\n                    message,\n                    payload\n                  } = response;\n\n                  const _state = cloneDeep(this.state);\n\n                  this.setState({\n                    statusChangeLoading: false\n                  });\n\n                  if (status === constants.SUCCESS) {\n                    _state.message = '';\n                    _state.ticketData = payload.result.ticketDetails;\n                  } else {\n                    _state.message = message;\n                  }\n\n                  this.setState({\n                    ticketData: _state.ticketData\n                  });\n                }\n              });\n            }\n          });\n        });\n      }\n    };\n\n    this.changeStatusValue = statusValue => {\n      const id = this.props.match.params.ticket_id;\n      this.setState({\n        statusChangeLoading: true\n      }, () => {\n        fetch.put({\n          url: constants.SERVICE_URLS.TICKET_STATUS + id + '/change-status?status=' + statusValue,\n          callbackHandler: response => {\n            // window.location.reload();\n            this.setState({\n              statusChangeLoading: false\n            });\n            fetch.get({\n              url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n              callbackHandler: response => {\n                const {\n                  status,\n                  message,\n                  payload\n                } = response;\n\n                const _state = cloneDeep(this.state);\n\n                _state.isLoading = false;\n\n                if (status === constants.SUCCESS) {\n                  _state.message = '';\n                  _state.ticketData = payload.result.ticketDetails;\n                } else {\n                  _state.message = message;\n                }\n\n                this.setState({\n                  ticketData: _state.ticketData\n                });\n              }\n            });\n            fetch.get({\n              url: constants.SERVICE_URLS.TICKET_HISTORY + id,\n              callbackHandler: response => {\n                const {\n                  status,\n                  payload,\n                  message\n                } = response;\n\n                const _state = cloneDeep(this.state);\n\n                if (status === constants.SUCCESS) {\n                  _state.message = \"\";\n                  _state.ticketJourney = payload.result.ticketJourneys;\n                } else {\n                  _state.message = message;\n                }\n\n                this.setState({\n                  ticketJourney: _state.ticketJourney\n                });\n              }\n            });\n          }\n        });\n      });\n    };\n\n    this.statusHandler = () => {\n      const id = this.props.match.params.ticket_id;\n      this.setState({\n        statusChangeLoading: true\n      }, () => {\n        fetch.put({\n          url: constants.SERVICE_URLS.TICKET_STATUS + id + '?status=CLOSED',\n          callbackHandler: response => {\n            // window.location.reload();\n            fetch.get({\n              url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n              callbackHandler: response => {\n                const {\n                  status,\n                  message,\n                  payload\n                } = response;\n\n                const _state = cloneDeep(this.state);\n\n                this.setState({\n                  statusChangeLoading: false\n                });\n\n                if (status === constants.SUCCESS) {\n                  _state.message = '';\n                  _state.ticketData = payload.result.ticketDetails;\n                } else {\n                  _state.message = message;\n                }\n\n                this.setState({\n                  ticketData: _state.ticketData\n                });\n              }\n            });\n          }\n        });\n      });\n    };\n\n    this.fileSelect = e => {\n      let files = e.target.files; // let reader = new FileReader();\n      // reader.readAsDataURL(files[0]);\n      // reader.onload = (e) => {\n      //     console.log(e.target.result)\n      // }\n\n      this.setState({\n        fileSelects: files[0]\n      });\n    };\n\n    this.replyChangeHandler = replyText => {\n      this.setState({\n        replyText: replyText\n      });\n    };\n\n    this.replySubmitHandler = replyOrComment => {\n      axios.interceptors.request.use(function (config) {\n        const token = window.localStorage.getItem('_token');\n        config.headers['x-access-channel'] = 'ANDROID';\n        config.headers['Content-Type'] = 'application/json';\n\n        if (token != null) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n\n        return config;\n      }, function (err) {\n        return Promise.reject(err);\n      });\n      const id = this.props.match.params.ticket_id;\n      const request = JSON.stringify({\n        text: this.state.replyText,\n        conversationType: \"Reply\",\n        mailRecepients: this.state.ticketData.emailId\n      });\n      const bodyFOrmData = new FormData();\n      bodyFOrmData.append('request', request);\n      bodyFOrmData.append('file', this.state.fileSelects); // bodyFOrmData.set('conversationType', \"Reply\");\n      // bodyFOrmData.set('mailRecepients', this.state.ticketData.emailId);\n\n      if (replyOrComment === \"reply\") {\n        this.setState({\n          statusChangeLoading: true\n        }, () => {\n          axios({\n            method: 'post',\n            url: constants.SERVICE_URLS.TICKET_REPLY + id,\n            data: bodyFOrmData\n          }).then(response => {\n            console.log(response);\n            this.setState({\n              statusChangeLoading: false\n            });\n          });\n        });\n      } else {\n        this.setState(() => {\n          fetch.post({\n            url: constants.SERVICE_URLS.TICKET_REPLY + id,\n            requestBody: {\n              text: this.state.replyText,\n              conversationType: \"comment\"\n            },\n            callbackHandler: response => {\n              console.log(response);\n              const {\n                status,\n                message,\n                payload\n              } = response;\n\n              const _state = cloneDeep(this.state);\n\n              if (status === constants.SUCCESS) {\n                _state.message = message;\n                window.location.reload();\n              }\n            }\n          });\n        });\n      }\n    };\n\n    this.resolutionChangeHandler = resolutionText => {\n      this.setState({\n        resolutionText: resolutionText\n      });\n    };\n\n    this.resolutionSubmitHandler = e => {\n      e.preventDefault();\n      const id = this.props.match.params.ticket_id;\n\n      if (this.state.resolutionText === null) {\n        alert(\"Resolution can't be empty!\");\n      } else {\n        this.setState({\n          statusChangeLoading: true\n        }, () => {\n          fetch.post({\n            url: constants.SERVICE_URLS.TICKET_RESOLUTION + id + '/resolution',\n            requestBody: {\n              text: this.state.resolutionText\n            },\n            callbackHandler: response => {\n              this.setState({\n                statusChangeLoading: false\n              });\n              console.log(response);\n              fetch.get({\n                url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                callbackHandler: response => {\n                  const {\n                    status,\n                    message,\n                    payload\n                  } = response;\n\n                  const _state = cloneDeep(this.state);\n\n                  _state.isLoading = false;\n\n                  if (status === constants.SUCCESS) {\n                    _state.message = '';\n                    _state.ticketData = payload.result.ticketDetails;\n                  } else {\n                    _state.message = message;\n                  }\n\n                  this.setState(_state);\n                }\n              });\n            }\n          });\n        });\n      }\n    };\n\n    this.state = {\n      fileSelects: null,\n      img: null,\n      ticketData: [],\n      listingData: [],\n      ticketReplies: [],\n      allAdminUsers: [],\n      ticketJourney: [],\n      resolutionText: null,\n      replyText: null,\n      allStatus: [],\n      isLoading: false,\n      statusChangeLoading: false\n    };\n  } // componentWillUpdate(prevProps) {\n  //     console.log(this.props)\n  // }\n\n\n  componentDidMount() {\n    let id = this.props.match.params.ticket_id;\n    this.getTicketInfo(id);\n  }\n\n  render() {\n    return React.createElement(TicketView, Object.assign({}, this.state, {\n      toggleReplyDisplay: this.toggleReplyDisplay,\n      changeSelectValue: this.changeSelectValue,\n      changeStatusValue: this.changeStatusValue,\n      resolutionSubmitHandler: this.resolutionSubmitHandler,\n      resolutionChangeHandler: this.resolutionChangeHandler,\n      statusHandler: this.statusHandler,\n      replyChangeHandler: this.replyChangeHandler,\n      replySubmitHandler: this.replySubmitHandler,\n      updateTicketData: this.updateTicketData,\n      fileSelect: this.fileSelect,\n      downloadFile: this.downloadFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TicketDetails;\n/*\n\n\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_REPLY + url,\n                    requestBody: {\n                        // file: this.state.fileSelects,\n                        text: this.state.replyText,\n                        conversationType: \"Reply\",\n                        mailRecepients: this.state.ticketData.emailId\n                    },\n                    callbackHandler: (response) => {\n                        this.setState({ statusChangeLoading: false })\n                        const { status, message, payload } = response;\n                        const _state = cloneDeep(this.state);\n                        console.log(response)\n                        if (status === constants.SUCCESS) {\n                            _state.message = message;\n                            // window.location.reload();\n                            fetch.get({\n                                url: constants.SERVICE_URLS.TICKET_REPLY + '/' + id + '/replies',\n                                callbackHandler: (response) => {\n\n                                    const { status, message, payload } = response;\n\n                                    const _state = cloneDeep(this.state);\n\n                                    if (status === constants.SUCCESS) {\n                                        _state.message = '';\n                                        _state.ticketReplies = payload.result.conversations;\n\n                                    } else {\n                                        _state.message = message;\n                                    }\n                                    this.setState({ ticketReplies: _state.ticketReplies });\n\n                                }\n                            })\n                        }\n                    }\n                })*/","map":{"version":3,"sources":["/home/rajatrajivsharma/Desktop/Web Develpoment/XYZ/src/Components/TicketDetails.js"],"names":["React","Component","cloneDeep","TicketView","fetch","constants","axios","FileSaver","saveAs","TicketDetails","constructor","props","downloadFile","url","method","responseType","then","response","console","log","data","getTicketInfo","id","setState","isLoading","get","SERVICE_URLS","TICKET_DETAILING","callbackHandler","status","message","payload","_state","state","SUCCESS","ticketData","result","ticketDetails","TICKET_LISTING","requestParams","page","limit","listingData","tickets","sort","a","b","TICKET_REPLY","ticketReplies","conversations","TICKET_VIEW_ADMIN","allAdminUsers","TICKET_HISTORY","ticketJourney","ticketJourneys","GET_TICKET_STATUS","allStatus","updateTicketData","changeSelectValue","selectValue","ticketStatus","alert","match","params","ticket_id","statusChangeLoading","put","TICKET_ASSIGN","changeStatusValue","statusValue","TICKET_STATUS","statusHandler","fileSelect","e","files","target","fileSelects","replyChangeHandler","replyText","replySubmitHandler","replyOrComment","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","err","Promise","reject","JSON","stringify","text","conversationType","mailRecepients","emailId","bodyFOrmData","FormData","append","post","requestBody","location","reload","resolutionChangeHandler","resolutionText","resolutionSubmitHandler","preventDefault","TICKET_RESOLUTION","img","componentDidMount","render","toggleReplyDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { cloneDeep } from 'lodash';\nimport TicketView from '../Views/TikcetView';\nimport { fetch } from '../modules/httpServices'\nimport { constants } from '../modules/constants';\nimport axios from 'axios';\nimport FileSaver, { saveAs } from 'file-saver'\n\nclass TicketDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileSelects: null,\n            img: null,\n            ticketData: [],\n            listingData: [],\n            ticketReplies: [],\n            allAdminUsers: [],\n            ticketJourney: [],\n            resolutionText: null,\n            replyText: null,\n            allStatus: [],\n            isLoading: false,\n            statusChangeLoading: false\n        }\n    }\n\n    // componentWillUpdate(prevProps) {\n    //     console.log(this.props)\n    // }\n\n    componentDidMount() {\n        let id = this.props.match.params.ticket_id;\n        this.getTicketInfo(id);\n    }\n\n\n\n    downloadFile = () => {\n\n        axios({\n            url: \"http://3.7.115.94/ticket-tool/v1/tickets/preview?filepath=/home/ec2-user/helpdesk_deploy/UPLOAD/3/Screenshot from 2020-05-22 12-06-33.jpg_1590465234624\",\n            method: 'GET',\n            responseType: \"blob\"\n        }).then((response) => {\n            console.log(response)\n            FileSaver.saveAs(response.data, \"hello.jpg\");\n\n\n        });\n    }\n\n    getTicketInfo = (id) => {\n\n\n\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                callbackHandler: (response) => {\n                    const { status, message, payload } = response;\n                    const _state = cloneDeep(this.state);\n\n                    _state.isLoading = false;\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = '';\n                        _state.ticketData = payload.result.ticketDetails;\n                    } else {\n                        _state.message = message;\n                    }\n                    this.setState(_state);\n                }\n            })\n        })\n\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_LISTING,\n                requestParams: {\n                    page: 0,\n                    limit: 50\n                },\n                callbackHandler: (response) => {\n                    const { status, message, payload } = response;\n                    const _state = cloneDeep(this.state);\n                    _state.isLoading = false;\n\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = '';\n                        _state.listingData = payload.result.tickets;\n                        _state.listingData.sort((a, b) => a.id - b.id)\n\n                    } else {\n                        _state.message = message;\n                    }\n\n                    this.setState(_state);\n\n                }\n            })\n        })\n\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_REPLY + id,\n                callbackHandler: (response) => {\n\n                    const { status, message, payload } = response;\n\n                    const _state = cloneDeep(this.state);\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = '';\n                        _state.ticketReplies = payload.result.conversations;\n\n                    } else {\n                        _state.message = message;\n                    }\n                    this.setState({ ticketReplies: _state.ticketReplies });\n\n                }\n            })\n        })\n\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_VIEW_ADMIN,\n                callbackHandler: (response) => {\n                    const { status, message, payload } = response;\n\n                    const _state = cloneDeep(this.state);\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = \"\";\n                        _state.allAdminUsers = payload.data;\n\n                    } else {\n                        _state.message = message\n                    }\n                    this.setState({ allAdminUsers: _state.allAdminUsers })\n                }\n            })\n        })\n\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_HISTORY + id,\n                callbackHandler: (response) => {\n                    const { status, payload, message } = response;\n\n                    const _state = cloneDeep(this.state);\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = \"\";\n                        _state.ticketJourney = payload.result.ticketJourneys;\n\n\n                    } else {\n                        _state.message = message;\n                    }\n                    this.setState({ ticketJourney: _state.ticketJourney })\n                }\n            })\n        })\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.GET_TICKET_STATUS,\n                callbackHandler: (response) => {\n                    const { message, status, payload } = response;\n                    const _state = cloneDeep(this.state);\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = \"\";\n                        _state.allStatus = payload.data;\n                    } else {\n                        _state.message = message;\n                    }\n                    this.setState({ allStatus: _state.allStatus })\n                }\n            })\n\n        })\n    }\n\n    updateTicketData = (id) => {\n        this.setState({ isLoading: true }, () => {\n            fetch.get({\n                url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                callbackHandler: (response) => {\n                    const { status, message, payload } = response;\n                    const _state = cloneDeep(this.state);\n\n                    _state.isLoading = false;\n\n                    if (status === constants.SUCCESS) {\n                        _state.message = '';\n                        _state.ticketData = payload.result.ticketDetails;\n                    } else {\n                        _state.message = message;\n                    }\n                    this.setState(_state);\n                }\n            })\n        })\n    }\n\n    changeSelectValue = (selectValue, ticketStatus) => {\n        if (ticketStatus === \"CLOSED\") {\n            alert('Cannot change assigned role the ticket is closed!');\n        } else {\n\n            const id = this.props.match.params.ticket_id;\n            this.setState({ statusChangeLoading: true }, () => {\n                fetch.put({\n                    url: constants.SERVICE_URLS.TICKET_ASSIGN + '/' + id + '?emailId=' + selectValue,\n                    callbackHandler: (response) => {\n                        console.log(response);\n                        fetch.get({\n                            url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                            callbackHandler: (response) => {\n                                const { status, message, payload } = response;\n                                const _state = cloneDeep(this.state);\n\n                                this.setState({ statusChangeLoading: false })\n                                if (status === constants.SUCCESS) {\n                                    _state.message = '';\n                                    _state.ticketData = payload.result.ticketDetails;\n                                } else {\n                                    _state.message = message;\n                                }\n                                this.setState({ ticketData: _state.ticketData });\n                            }\n                        })\n                    }\n                })\n            })\n\n\n        }\n\n    }\n\n    changeStatusValue = (statusValue) => {\n        const id = this.props.match.params.ticket_id;\n\n        this.setState({ statusChangeLoading: true }, () => {\n            fetch.put({\n                url: constants.SERVICE_URLS.TICKET_STATUS + id + '/change-status?status=' + statusValue,\n                callbackHandler: (response) => {\n                    // window.location.reload();\n                    this.setState({ statusChangeLoading: false });\n                    fetch.get({\n                        url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                        callbackHandler: (response) => {\n                            const { status, message, payload } = response;\n                            const _state = cloneDeep(this.state);\n\n                            _state.isLoading = false;\n\n                            if (status === constants.SUCCESS) {\n                                _state.message = '';\n                                _state.ticketData = payload.result.ticketDetails;\n                            } else {\n                                _state.message = message;\n                            }\n                            this.setState({ ticketData: _state.ticketData });\n                        }\n                    })\n\n                    fetch.get({\n                        url: constants.SERVICE_URLS.TICKET_HISTORY + id,\n                        callbackHandler: (response) => {\n                            const { status, payload, message } = response;\n\n                            const _state = cloneDeep(this.state);\n\n                            if (status === constants.SUCCESS) {\n                                _state.message = \"\";\n                                _state.ticketJourney = payload.result.ticketJourneys;\n\n\n                            } else {\n                                _state.message = message;\n                            }\n                            this.setState({ ticketJourney: _state.ticketJourney })\n                        }\n                    })\n\n\n                }\n            })\n        })\n\n\n    }\n    statusHandler = () => {\n\n        const id = this.props.match.params.ticket_id;\n        this.setState({ statusChangeLoading: true }, () => {\n            fetch.put({\n                url: constants.SERVICE_URLS.TICKET_STATUS + id + '?status=CLOSED',\n                callbackHandler: (response) => {\n                    // window.location.reload();\n                    fetch.get({\n                        url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                        callbackHandler: (response) => {\n                            const { status, message, payload } = response;\n                            const _state = cloneDeep(this.state);\n\n                            this.setState({ statusChangeLoading: false })\n                            if (status === constants.SUCCESS) {\n                                _state.message = '';\n                                _state.ticketData = payload.result.ticketDetails;\n                            } else {\n                                _state.message = message;\n                            }\n                            this.setState({ ticketData: _state.ticketData });\n                        }\n                    })\n                }\n            })\n        })\n\n    }\n\n    fileSelect = (e) => {\n        let files = e.target.files;\n\n        // let reader = new FileReader();\n        // reader.readAsDataURL(files[0]);\n        // reader.onload = (e) => {\n        //     console.log(e.target.result)\n        // }\n        this.setState({ fileSelects: files[0] })\n\n\n    }\n    replyChangeHandler = (replyText) => {\n        this.setState({ replyText: replyText });\n    }\n\n\n    replySubmitHandler = (replyOrComment) => {\n        axios.interceptors.request.use(function (config) {\n            const token = window.localStorage.getItem('_token');\n\n            config.headers['x-access-channel'] = 'ANDROID';\n            config.headers['Content-Type'] = 'application/json';\n\n            if (token != null) {\n                config.headers.Authorization = `Bearer ${token}`;\n            }\n\n            return config;\n        }, function (err) {\n\n            return Promise.reject(err);\n\n        });\n\n\n        const id = this.props.match.params.ticket_id;\n\n        const request = JSON.stringify({\n            text: this.state.replyText,\n            conversationType: \"Reply\",\n            mailRecepients: this.state.ticketData.emailId\n        });\n        const bodyFOrmData = new FormData();\n\n\n        bodyFOrmData.append('request', request);\n        bodyFOrmData.append('file', this.state.fileSelects)\n        // bodyFOrmData.set('conversationType', \"Reply\");\n        // bodyFOrmData.set('mailRecepients', this.state.ticketData.emailId);\n        if (replyOrComment === \"reply\") {\n            this.setState({ statusChangeLoading: true }, () => {\n\n                axios({\n                    method: 'post',\n                    url: constants.SERVICE_URLS.TICKET_REPLY + id,\n                    data: bodyFOrmData\n                })\n                    .then((response) => {\n                        console.log(response)\n                        this.setState({ statusChangeLoading: false })\n                    })\n            })\n        } else {\n            this.setState(() => {\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_REPLY + id,\n                    requestBody: {\n                        text: this.state.replyText,\n                        conversationType: \"comment\"\n                    },\n                    callbackHandler: (response) => {\n                        console.log(response);\n                        const { status, message, payload } = response;\n                        const _state = cloneDeep(this.state);\n\n                        if (status === constants.SUCCESS) {\n                            _state.message = message;\n                            window.location.reload();\n                        }\n                    }\n                })\n            })\n        }\n    }\n\n    resolutionChangeHandler = (resolutionText) => {\n        this.setState({ resolutionText: resolutionText })\n    }\n\n    resolutionSubmitHandler = (e) => {\n        e.preventDefault();\n        const id = this.props.match.params.ticket_id;\n        if (this.state.resolutionText === null) {\n            alert(\"Resolution can't be empty!\")\n        } else {\n            this.setState({ statusChangeLoading: true }, () => {\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_RESOLUTION + id + '/resolution',\n                    requestBody: {\n                        text: this.state.resolutionText\n                    },\n                    callbackHandler: (response) => {\n                        this.setState({ statusChangeLoading: false });\n                        console.log(response);\n                        fetch.get({\n                            url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n                            callbackHandler: (response) => {\n                                const { status, message, payload } = response;\n                                const _state = cloneDeep(this.state);\n\n                                _state.isLoading = false;\n\n                                if (status === constants.SUCCESS) {\n                                    _state.message = '';\n                                    _state.ticketData = payload.result.ticketDetails;\n                                } else {\n                                    _state.message = message;\n                                }\n                                this.setState(_state);\n                            }\n                        })\n                    }\n                })\n            })\n\n        }\n    }\n\n\n    render() {\n        return (\n            <TicketView\n                {...this.state}\n                toggleReplyDisplay={this.toggleReplyDisplay}\n                changeSelectValue={this.changeSelectValue}\n                changeStatusValue={this.changeStatusValue}\n                resolutionSubmitHandler={this.resolutionSubmitHandler}\n                resolutionChangeHandler={this.resolutionChangeHandler}\n                statusHandler={this.statusHandler}\n                replyChangeHandler={this.replyChangeHandler}\n                replySubmitHandler={this.replySubmitHandler}\n                updateTicketData={this.updateTicketData}\n                fileSelect={this.fileSelect}\n                downloadFile={this.downloadFile}\n            />\n\n        )\n    }\n}\n\nexport default TicketDetails;\n\n\n/*\n\n\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_REPLY + url,\n                    requestBody: {\n                        // file: this.state.fileSelects,\n                        text: this.state.replyText,\n                        conversationType: \"Reply\",\n                        mailRecepients: this.state.ticketData.emailId\n                    },\n                    callbackHandler: (response) => {\n                        this.setState({ statusChangeLoading: false })\n                        const { status, message, payload } = response;\n                        const _state = cloneDeep(this.state);\n                        console.log(response)\n                        if (status === constants.SUCCESS) {\n                            _state.message = message;\n                            // window.location.reload();\n                            fetch.get({\n                                url: constants.SERVICE_URLS.TICKET_REPLY + '/' + id + '/replies',\n                                callbackHandler: (response) => {\n\n                                    const { status, message, payload } = response;\n\n                                    const _state = cloneDeep(this.state);\n\n                                    if (status === constants.SUCCESS) {\n                                        _state.message = '';\n                                        _state.ticketReplies = payload.result.conversations;\n\n                                    } else {\n                                        _state.message = message;\n                                    }\n                                    this.setState({ ticketReplies: _state.ticketReplies });\n\n                                }\n                            })\n                        }\n                    }\n                })*/"]},"metadata":{},"sourceType":"module"}