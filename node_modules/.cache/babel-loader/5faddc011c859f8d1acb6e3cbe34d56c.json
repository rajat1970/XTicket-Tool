{"ast":null,"code":"var _jsxFileName = \"/home/rajatrajivsharma/Desktop/Web Develpoment/XYZ/XTicket-Tool/src/pages/ReplyPage.js\";\nimport React, { Component } from 'react';\nimport TicketReplyNav from '../Views/ticketReplyNav';\nimport TicketReplyBottomContainer from '../Views/ticketReplyBottomContainer';\nimport { fetch } from '../modules/httpServices';\nimport { constants } from '../modules/constants';\nimport { cloneDeep } from 'lodash';\n\nclass Reply extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getTicketInfo = id => {\n      fetch.get({\n        url: constants.SERVICE_URLS.TICKET_REPLY + '/' + id + '/replies',\n        callbackHandler: response => {\n          const {\n            status,\n            message,\n            payload\n          } = response;\n\n          const _state = cloneDeep(this.state);\n\n          if (status === constants.SUCCESS) {\n            _state.message = '';\n            _state.replies = payload.result.conversations;\n          } else {\n            _state.message = message;\n          }\n\n          this.setState({\n            replies: _state.replies\n          });\n        }\n      });\n      fetch.get({\n        url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n        callbackHandler: response => {\n          const {\n            status,\n            message,\n            payload\n          } = response;\n\n          const _state = cloneDeep(this.state);\n\n          console.log(response);\n\n          if (status === constants.SUCCESS) {\n            _state.message = '';\n            _state.ticketData = payload.result.ticketDetails;\n          } else {\n            _state.message = message;\n          }\n\n          this.setState({\n            ticketData: _state.ticketData\n          });\n        }\n      });\n    };\n\n    this.handleChange = text => {\n      this.setState({\n        text: text\n      });\n    };\n\n    this.handleCommentReply = commentReply => {\n      this.setState({\n        commentReply: commentReply\n      });\n    };\n\n    this.handleSubmit = commentReply => {\n      console.log(commentReply);\n      const ticket_id = this.props.match.params.ticket_id;\n      const url = '/' + ticket_id + '/replies';\n      this.setState({\n        ticket_id: ticket_id\n      });\n      const {\n        text,\n        ticketData\n      } = this.state;\n      commentReply === \"reply\" ? this.setState(() => {\n        fetch.post({\n          url: constants.SERVICE_URLS.TICKET_REPLY + url,\n          requestBody: {\n            text: text,\n            conversationType: \"Reply\",\n            mailRecepients: ticketData.emailId\n          },\n          callbackHandler: response => {\n            console.log(response);\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = message;\n              window.location.reload();\n            }\n          }\n        });\n      }) : this.setState(() => {\n        fetch.post({\n          url: constants.SERVICE_URLS.TICKET_REPLY + url,\n          requestBody: {\n            text: text,\n            conversationType: \"comment\"\n          },\n          callbackHandler: response => {\n            console.log(response);\n            const {\n              status,\n              message,\n              payload\n            } = response;\n\n            const _state = cloneDeep(this.state);\n\n            if (status === constants.SUCCESS) {\n              _state.message = message;\n              window.location.reload();\n            }\n          }\n        });\n      });\n    };\n\n    this.state = {\n      text: '',\n      ticket_id: 0,\n      replies: [],\n      ticketData: [],\n      commentReply: \"reply\"\n    };\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.ticket_id;\n    this.getTicketInfo(id);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Ticket-Reply-Container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(TicketReplyNav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(TicketReplyBottomContainer, Object.assign({\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit\n    }, this.state, {\n      props: this.props,\n      handleCommentReply: this.handleCommentReply,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Reply;","map":{"version":3,"sources":["/home/rajatrajivsharma/Desktop/Web Develpoment/XYZ/XTicket-Tool/src/pages/ReplyPage.js"],"names":["React","Component","TicketReplyNav","TicketReplyBottomContainer","fetch","constants","cloneDeep","Reply","constructor","props","getTicketInfo","id","get","url","SERVICE_URLS","TICKET_REPLY","callbackHandler","response","status","message","payload","_state","state","SUCCESS","replies","result","conversations","setState","TICKET_DETAILING","console","log","ticketData","ticketDetails","handleChange","text","handleCommentReply","commentReply","handleSubmit","ticket_id","match","params","post","requestBody","conversationType","mailRecepients","emailId","window","location","reload","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TicketReplyNav from '../Views/ticketReplyNav';\nimport TicketReplyBottomContainer from '../Views/ticketReplyBottomContainer';\nimport { fetch } from '../modules/httpServices';\nimport { constants } from '../modules/constants';\nimport { cloneDeep } from 'lodash';\n\n\nclass Reply extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            ticket_id: 0,\n            replies: [],\n            ticketData: [],\n            commentReply: \"reply\"\n        }\n    }\n\n    componentDidMount() {\n        const id = this.props.match.params.ticket_id\n        this.getTicketInfo(id);\n    }\n\n\n    getTicketInfo = (id) => {\n        fetch.get({\n            url: constants.SERVICE_URLS.TICKET_REPLY + '/' + id + '/replies',\n            callbackHandler: (response) => {\n                const { status, message, payload } = response;\n                const _state = cloneDeep(this.state)\n                if (status === constants.SUCCESS) {\n                    _state.message = '';\n                    _state.replies = payload.result.conversations;\n                } else {\n                    _state.message = message;\n                }\n                this.setState({ replies: _state.replies })\n            }\n        })\n\n        fetch.get({\n            url: constants.SERVICE_URLS.TICKET_DETAILING + '/' + id,\n            callbackHandler: (response) => {\n                const { status, message, payload } = response;\n                const _state = cloneDeep(this.state);\n                console.log(response)\n                if (status === constants.SUCCESS) {\n                    _state.message = '';\n                    _state.ticketData = payload.result.ticketDetails;\n                } else {\n                    _state.message = message;\n                }\n\n                this.setState({ ticketData: _state.ticketData });\n\n            }\n        })\n    }\n\n    // timestampToDate = () => {\n    //     const creationTime = new Date(this.state.ticketData.creationTime);\n    //     const dueOn = new Date(this.state.ticketData.dueOn)\n\n    //     var month = new Array();\n    //     month[0] = \"January\";\n    //     month[1] = \"February\";\n    //     month[2] = \"March\";\n    //     month[3] = \"April\";\n    //     month[4] = \"May\";\n    //     month[5] = \"June\";\n    //     month[6] = \"July\";\n    //     month[7] = \"August\";\n    //     month[8] = \"September\";\n    //     month[9] = \"October\";\n    //     month[10] = \"November\";\n    //     month[11] = \"December\";\n\n    //     const creationMonth = month[creationTime.getMonth()];\n    //     const dueOnMonth = month[dueOn.getMonth()];\n    //     console.log(creationMonth)\n    // }\n\n    handleChange = (text) => {\n        this.setState({ text: text });\n    }\n\n\n    handleCommentReply = (commentReply) => {\n        this.setState({ commentReply: commentReply })\n    }\n\n\n    handleSubmit = (commentReply) => {\n\n        console.log(commentReply);\n        const ticket_id = this.props.match.params.ticket_id;\n        const url = '/' + ticket_id + '/replies';\n        this.setState({ ticket_id: ticket_id });\n        const { text, ticketData } = this.state;\n        commentReply === \"reply\" ?\n            this.setState(() => {\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_REPLY + url,\n                    requestBody: {\n                        text: text,\n                        conversationType: \"Reply\",\n                        mailRecepients: ticketData.emailId\n                    },\n                    callbackHandler: (response) => {\n                        console.log(response);\n                        const { status, message, payload } = response;\n                        const _state = cloneDeep(this.state);\n\n                        if (status === constants.SUCCESS) {\n                            _state.message = message;\n                            window.location.reload();\n                        }\n                    }\n                })\n            }) :\n            this.setState(() => {\n                fetch.post({\n                    url: constants.SERVICE_URLS.TICKET_REPLY + url,\n                    requestBody: {\n                        text: text,\n                        conversationType: \"comment\"\n                    },\n                    callbackHandler: (response) => {\n                        console.log(response);\n                        const { status, message, payload } = response;\n                        const _state = cloneDeep(this.state);\n\n                        if (status === constants.SUCCESS) {\n                            _state.message = message;\n                            window.location.reload();\n                        }\n                    }\n                })\n            })\n    }\n\n    render() {\n        return (\n            <div className=\"Ticket-Reply-Container\">\n                <TicketReplyNav />\n                <TicketReplyBottomContainer\n                    handleChange={this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                    {...this.state}\n                    props={this.props}\n                    handleCommentReply={this.handleCommentReply}\n                />\n            </div>\n\n        )\n    }\n}\n\nexport default Reply;"]},"metadata":{},"sourceType":"module"}